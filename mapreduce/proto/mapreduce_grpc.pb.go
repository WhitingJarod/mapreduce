// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.6
// source: mapreduce.proto

package protocol

import (
    context "context"
    grpc "google.golang.org/grpc"
    codes "google.golang.org/grpc/codes"
    status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MasterClient is the client API for Master service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MasterClient interface {
    RequestTask(ctx context.Context, in *WorkerStatus, opts ...grpc.CallOption) (*Task, error)
}

type masterClient struct {
    cc grpc.ClientConnInterface
}

func NewMasterClient(cc grpc.ClientConnInterface) MasterClient {
    return &masterClient{cc}
}

func (c *masterClient) RequestTask(ctx context.Context, in *WorkerStatus, opts ...grpc.CallOption) (*Task, error) {
    out := new(Task)
    err := c.cc.Invoke(ctx, "/mapreduce.Master/RequestTask", in, out, opts...)
    if err != nil {
        return nil, err
    }
    return out, nil
}

// MasterServer is the server API for Master service.
// All implementations must embed UnimplementedMasterServer
// for forward compatibility
type MasterServer interface {
    RequestTask(context.Context, *WorkerStatus) (*Task, error)
    mustEmbedUnimplementedMasterServer()
}

// UnimplementedMasterServer must be embedded to have forward compatible implementations.
type UnimplementedMasterServer struct {
}

func (UnimplementedMasterServer) RequestTask(context.Context, *WorkerStatus) (*Task, error) {
    return nil, status.Errorf(codes.Unimplemented, "method RequestTask not implemented")
}
func (UnimplementedMasterServer) mustEmbedUnimplementedMasterServer() {}

// UnsafeMasterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MasterServer will
// result in compilation errors.
type UnsafeMasterServer interface {
    mustEmbedUnimplementedMasterServer()
}

func RegisterMasterServer(s grpc.ServiceRegistrar, srv MasterServer) {
    s.RegisterService(&Master_ServiceDesc, srv)
}

func _Master_RequestTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
    in := new(WorkerStatus)
    if err := dec(in); err != nil {
        return nil, err
    }
    if interceptor == nil {
        return srv.(MasterServer).RequestTask(ctx, in)
    }
    info := &grpc.UnaryServerInfo{
        Server:     srv,
        FullMethod: "/mapreduce.Master/RequestTask",
    }
    handler := func(ctx context.Context, req interface{}) (interface{}, error) {
        return srv.(MasterServer).RequestTask(ctx, req.(*WorkerStatus))
    }
    return interceptor(ctx, in, info, handler)
}

// Master_ServiceDesc is the grpc.ServiceDesc for Master service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Master_ServiceDesc = grpc.ServiceDesc{
    ServiceName: "mapreduce.Master",
    HandlerType: (*MasterServer)(nil),
    Methods: []grpc.MethodDesc{
        {
            MethodName: "RequestTask",
            Handler:    _Master_RequestTask_Handler,
        },
    },
    Streams:  []grpc.StreamDesc{},
    Metadata: "mapreduce.proto",
}
